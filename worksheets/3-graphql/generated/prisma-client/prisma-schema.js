module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCustomer {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderline {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Customer {
  id: ID!
  email: String
  name: String!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  email: String
  name: String!
  orders: OrderCreateManyWithoutBuyerInput
}

input CustomerCreateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutOrdersInput {
  email: String
  name: String!
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  email: String
  name: String!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateInput {
  email: String
  name: String
  orders: OrderUpdateManyWithoutBuyerInput
}

input CustomerUpdateManyMutationInput {
  email: String
  name: String
}

input CustomerUpdateOneRequiredWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  update: CustomerUpdateWithoutOrdersDataInput
  upsert: CustomerUpsertWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateWithoutOrdersDataInput {
  email: String
  name: String
}

input CustomerUpsertWithoutOrdersInput {
  update: CustomerUpdateWithoutOrdersDataInput!
  create: CustomerCreateWithoutOrdersInput!
}

input CustomerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  id: ID
  email: String
}

scalar DateTime

scalar Long

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderline(data: OrderlineCreateInput!): Orderline!
  updateOrderline(data: OrderlineUpdateInput!, where: OrderlineWhereUniqueInput!): Orderline
  updateManyOrderlines(data: OrderlineUpdateManyMutationInput!, where: OrderlineWhereInput): BatchPayload!
  upsertOrderline(where: OrderlineWhereUniqueInput!, create: OrderlineCreateInput!, update: OrderlineUpdateInput!): Orderline!
  deleteOrderline(where: OrderlineWhereUniqueInput!): Orderline
  deleteManyOrderlines(where: OrderlineWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  date: DateTime!
  buyer: Customer!
  amount: Float!
  orderlines(where: OrderlineWhereInput, orderBy: OrderlineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orderline!]
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  date: DateTime!
  buyer: CustomerCreateOneWithoutOrdersInput!
  amount: Float!
  orderlines: OrderlineCreateManyWithoutOrderInput
}

input OrderCreateManyWithoutBuyerInput {
  create: [OrderCreateWithoutBuyerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutOrderlinesInput {
  create: OrderCreateWithoutOrderlinesInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutBuyerInput {
  date: DateTime!
  amount: Float!
  orderlines: OrderlineCreateManyWithoutOrderInput
}

input OrderCreateWithoutOrderlinesInput {
  date: DateTime!
  buyer: CustomerCreateOneWithoutOrdersInput!
  amount: Float!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type Orderline {
  id: ID!
  quantity: Int!
  product: Product!
  order: Order!
}

type OrderlineConnection {
  pageInfo: PageInfo!
  edges: [OrderlineEdge]!
  aggregate: AggregateOrderline!
}

input OrderlineCreateInput {
  quantity: Int!
  product: ProductCreateOneWithoutOrderlinesInput!
  order: OrderCreateOneWithoutOrderlinesInput!
}

input OrderlineCreateManyWithoutOrderInput {
  create: [OrderlineCreateWithoutOrderInput!]
  connect: [OrderlineWhereUniqueInput!]
}

input OrderlineCreateManyWithoutProductInput {
  create: [OrderlineCreateWithoutProductInput!]
  connect: [OrderlineWhereUniqueInput!]
}

input OrderlineCreateWithoutOrderInput {
  quantity: Int!
  product: ProductCreateOneWithoutOrderlinesInput!
}

input OrderlineCreateWithoutProductInput {
  quantity: Int!
  order: OrderCreateOneWithoutOrderlinesInput!
}

type OrderlineEdge {
  node: Orderline!
  cursor: String!
}

enum OrderlineOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderlinePreviousValues {
  id: ID!
  quantity: Int!
}

input OrderlineScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [OrderlineScalarWhereInput!]
  OR: [OrderlineScalarWhereInput!]
  NOT: [OrderlineScalarWhereInput!]
}

type OrderlineSubscriptionPayload {
  mutation: MutationType!
  node: Orderline
  updatedFields: [String!]
  previousValues: OrderlinePreviousValues
}

input OrderlineSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderlineWhereInput
  AND: [OrderlineSubscriptionWhereInput!]
  OR: [OrderlineSubscriptionWhereInput!]
  NOT: [OrderlineSubscriptionWhereInput!]
}

input OrderlineUpdateInput {
  quantity: Int
  product: ProductUpdateOneRequiredWithoutOrderlinesInput
  order: OrderUpdateOneRequiredWithoutOrderlinesInput
}

input OrderlineUpdateManyDataInput {
  quantity: Int
}

input OrderlineUpdateManyMutationInput {
  quantity: Int
}

input OrderlineUpdateManyWithoutOrderInput {
  create: [OrderlineCreateWithoutOrderInput!]
  delete: [OrderlineWhereUniqueInput!]
  connect: [OrderlineWhereUniqueInput!]
  set: [OrderlineWhereUniqueInput!]
  disconnect: [OrderlineWhereUniqueInput!]
  update: [OrderlineUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [OrderlineUpsertWithWhereUniqueWithoutOrderInput!]
  deleteMany: [OrderlineScalarWhereInput!]
  updateMany: [OrderlineUpdateManyWithWhereNestedInput!]
}

input OrderlineUpdateManyWithoutProductInput {
  create: [OrderlineCreateWithoutProductInput!]
  delete: [OrderlineWhereUniqueInput!]
  connect: [OrderlineWhereUniqueInput!]
  set: [OrderlineWhereUniqueInput!]
  disconnect: [OrderlineWhereUniqueInput!]
  update: [OrderlineUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [OrderlineUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [OrderlineScalarWhereInput!]
  updateMany: [OrderlineUpdateManyWithWhereNestedInput!]
}

input OrderlineUpdateManyWithWhereNestedInput {
  where: OrderlineScalarWhereInput!
  data: OrderlineUpdateManyDataInput!
}

input OrderlineUpdateWithoutOrderDataInput {
  quantity: Int
  product: ProductUpdateOneRequiredWithoutOrderlinesInput
}

input OrderlineUpdateWithoutProductDataInput {
  quantity: Int
  order: OrderUpdateOneRequiredWithoutOrderlinesInput
}

input OrderlineUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderlineWhereUniqueInput!
  data: OrderlineUpdateWithoutOrderDataInput!
}

input OrderlineUpdateWithWhereUniqueWithoutProductInput {
  where: OrderlineWhereUniqueInput!
  data: OrderlineUpdateWithoutProductDataInput!
}

input OrderlineUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderlineWhereUniqueInput!
  update: OrderlineUpdateWithoutOrderDataInput!
  create: OrderlineCreateWithoutOrderInput!
}

input OrderlineUpsertWithWhereUniqueWithoutProductInput {
  where: OrderlineWhereUniqueInput!
  update: OrderlineUpdateWithoutProductDataInput!
  create: OrderlineCreateWithoutProductInput!
}

input OrderlineWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  product: ProductWhereInput
  order: OrderWhereInput
  AND: [OrderlineWhereInput!]
  OR: [OrderlineWhereInput!]
  NOT: [OrderlineWhereInput!]
}

input OrderlineWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  date: DateTime!
  amount: Float!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  date: DateTime
  buyer: CustomerUpdateOneRequiredWithoutOrdersInput
  amount: Float
  orderlines: OrderlineUpdateManyWithoutOrderInput
}

input OrderUpdateManyDataInput {
  date: DateTime
  amount: Float
}

input OrderUpdateManyMutationInput {
  date: DateTime
  amount: Float
}

input OrderUpdateManyWithoutBuyerInput {
  create: [OrderCreateWithoutBuyerInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutBuyerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutBuyerInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateOneRequiredWithoutOrderlinesInput {
  create: OrderCreateWithoutOrderlinesInput
  update: OrderUpdateWithoutOrderlinesDataInput
  upsert: OrderUpsertWithoutOrderlinesInput
  connect: OrderWhereUniqueInput
}

input OrderUpdateWithoutBuyerDataInput {
  date: DateTime
  amount: Float
  orderlines: OrderlineUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutOrderlinesDataInput {
  date: DateTime
  buyer: CustomerUpdateOneRequiredWithoutOrdersInput
  amount: Float
}

input OrderUpdateWithWhereUniqueWithoutBuyerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutBuyerDataInput!
}

input OrderUpsertWithoutOrderlinesInput {
  update: OrderUpdateWithoutOrderlinesDataInput!
  create: OrderCreateWithoutOrderlinesInput!
}

input OrderUpsertWithWhereUniqueWithoutBuyerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutBuyerDataInput!
  create: OrderCreateWithoutBuyerInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  buyer: CustomerWhereInput
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  orderlines_every: OrderlineWhereInput
  orderlines_some: OrderlineWhereInput
  orderlines_none: OrderlineWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  title: String!
  price: Float!
  orderlines(where: OrderlineWhereInput, orderBy: OrderlineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orderline!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  title: String!
  price: Float!
  orderlines: OrderlineCreateManyWithoutProductInput
}

input ProductCreateOneWithoutOrderlinesInput {
  create: ProductCreateWithoutOrderlinesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutOrderlinesInput {
  title: String!
  price: Float!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  price: Float!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  title: String
  price: Float
  orderlines: OrderlineUpdateManyWithoutProductInput
}

input ProductUpdateManyMutationInput {
  title: String
  price: Float
}

input ProductUpdateOneRequiredWithoutOrderlinesInput {
  create: ProductCreateWithoutOrderlinesInput
  update: ProductUpdateWithoutOrderlinesDataInput
  upsert: ProductUpsertWithoutOrderlinesInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutOrderlinesDataInput {
  title: String
  price: Float
}

input ProductUpsertWithoutOrderlinesInput {
  update: ProductUpdateWithoutOrderlinesDataInput!
  create: ProductCreateWithoutOrderlinesInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  orderlines_every: OrderlineWhereInput
  orderlines_some: OrderlineWhereInput
  orderlines_none: OrderlineWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderline(where: OrderlineWhereUniqueInput!): Orderline
  orderlines(where: OrderlineWhereInput, orderBy: OrderlineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Orderline]!
  orderlinesConnection(where: OrderlineWhereInput, orderBy: OrderlineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderlineConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  node(id: ID!): Node
}

type Subscription {
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderline(where: OrderlineSubscriptionWhereInput): OrderlineSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
}
`
      }
    